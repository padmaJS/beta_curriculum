# Non-Enumerables

## Navigation

[Return Home](../start.livemd)

## Setup

Ensure you run the `ea` command to evaluate all Elixir cells before starting. Alternatively,
you can evaluate the Elixir cells as you read.

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino", override: true},
  {:kino_lab, "~> 0.1.0-dev", github: "jonatanklosko/kino_lab"},
  {:vega_lite, "~> 0.1.3"},
  {:benchee, "~> 0.1"},
  {:ecto, "~> 3.7"},
  {:math, "~> 0.7.0"},
  {:utils, path: "utils"}
])
```

## Enumeration With Non-Enumerables

Data types that do not contain multiple elements are not enumerable.
However, it's still sometimes useful to enumerate over non-enumerable data types.

Even though you can't enumerate over them directly, the trick is to convert
non-enumerable data into an enumerable data type.

### Integers

How would you convert integers into an Enumerable? 
You can use the `Integer.digits/1` function.

```elixir
Integer.digits(123)
```

### Your Turn

In the Elixir cell below, convert the integer `4389` into a list of digits.

```elixir

```

### Tuples

Despite being so similar to lists, tuples are not considered collections. 
That's primarily because they are intended as fixed-sized containers, and any case that requires
enumeration would likely be better served with lists.

To get around this if needed, you can convert a tuple to a list with `Tuple.to_list/1`. 
Now you have a list that you can work with as a collection if necessary. However, if you find
yourself doing this often, it may have been a better
choice to start with a list instead of a tuple.

```elixir
Tuple.to_list({1, 2, 3})
```

### Strings

Strings are not enumerable, however they can be converted into lists with either `String.graphemes/1`
or `String.codepoints/1`.

#### `String.codepoints/1`

Under the hood, strings are represented with a **codepoint**. A codepoint is an integer that represents
the character. Each character such as `"a"` has a corresponding codepoint. That's why the
function is called `String.codepoints/1`.

```elixir
String.codepoints("abcdefghijklmnopqrstuvwxyz")
```

For example, the code point for the letter `a` is `97`. Lowercase and uppercase letters have
different codepoints.

You can find the code point of any character by using `?` in Elixir. Evaluate the Elixir cell below
to see how `?a` returns `97`.

```elixir
?a
```

If you are curious, the full list of representable characters is called the [The Unicode Standard](https://unicode.org/standard/standard.html).

See this table for alphabetical characters and their code point values.
You do not need to memorize these values! You only need to be aware that each character has a corresponding codepoint.

```elixir
Utils.table(:unicode)
```

#### `String.graphemes/1`

Some special characters are actually multiple characters combined.

You'll notice that é is actually 2 characters if you use `String.codepoints/1`.
Each character has its own codepoint.

```elixir
String.codepoints("é")
```

We use **grapheme** to refer to special characters that may contain multiple codepoints.
Therefore, use `String.graphemes` when you want to convert the string to a list without separating special characters
formed from multiple codepoints.

```elixir
String.graphemes("é")
```

Now your string is an enumerable list of characters.

### Your Turn

In the Elixir cell below, convert the string `"Hello, world!"` into a list.

```elixir

```

## Breaking Down Problems

### Breaking Down Problems As Input And Output

We've shown some examples of how to convert non-enumerable data into
an enumerable as a list. This highlights the critical ability as a developer to
manipulate the shape of data from one form to another.

If you think about your program as the input of data and the output of data,
you can model your desired functionality even if you don't understand how you're 
going to implement it.

```mermaid
flowchart LR
  Input --> B[Black Box] --> Output
```

Then you could break that problem down further into a series of
transformations.

```mermaid
flowchart LR
Input --> 1[Transformation] --> 2[Transformation] --> 3[Transformation] --> Output
```

Often, you need to solve problems that you don't know the answer to.

Whenever this occurs, you should ask yourself if you can break that problem down even further.
If you can't solve one problem, try to solve an easier problem that will build your knowledge
for how to solve the harder problem.

For example: imagine you want to count how many times the letter "e" occurs in a string. If you
know how to count how many times it occurs in a list, you can start by converting the string to
a list.
